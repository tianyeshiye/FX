package ty.fx.ohlc;

import java.io.File;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

public class PersentCalculate {

	public static void main(String[] args) throws Exception {

		List<TimeDataBean> inputdataList = new ArrayList<TimeDataBean>();

		for (int i = 0; i < 365 * 24; i++) {

			TimeDataBean bean = new TimeDataBean();
			bean.setTimeYMDHM("201802191500");
			bean.setTimeH(String.valueOf(i % 24));
			bean.setHigh(123.123f + (int) (20 + Math.random() * (10)));
			bean.setLow(123.100f + (int) (1 + Math.random() * (10)));
			bean.setStart(123.123f + (int) (10 + Math.random() * (10)));
			bean.setEnd(123.100f + (int) (10 + Math.random() * (10)));
			bean.setHlValue(bean.getHigh() - bean.getLow());
			bean.setSeValue(bean.getStart() - bean.getEnd());

			inputdataList.add(bean);
		}

		PersentCalculate calculate = new PersentCalculate();

		calculate.calculatePersent(inputdataList, 28);
	}

	private List<TimeDataBean> getInputData(String filepath) {
		
		File csv = new File(filepath); // CSV文件路径
        csv.setReadable(true);//设置可读
        csv.setWritable(true);//设置可写
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(csv));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        String line = "";
        String everyLine = "";
        ArrayList<String> allString = new ArrayList<>();
  
            while ((line = br.readLine()) != null) // 读取到的内容给line变量
            {
                everyLine = line;
                System.out.println(everyLine);
                allString.add(everyLine);
            }
            System.out.println("csv表格中所有行数：" + allString.size());
      


		List<TimeDataBean> list = new ArrayList<TimeDataBean>();

		return list;
	}

	private void calculatePersent(List<TimeDataBean> inputdataList, float minFloat) {

		List<TimeDataBean> filterList = new ArrayList<TimeDataBean>();

		inputdataList.forEach(bean -> {
			if (Math.abs(bean.getHlValue()) >= minFloat) {
				filterList.add(bean);
			}
		});

		int total = filterList.size();

		Map<String, List<TimeDataBean>> groupByList = filterList.stream()
				.collect(Collectors.groupingBy(TimeDataBean::getTimeH));

		List<ResultBean> resultBeanList = new ArrayList<ResultBean>();

		groupByList.forEach((time, beanList) -> {

			ResultBean resultBean = new ResultBean();

			HighLowComparator compareHightLow = new HighLowComparator();
			Collections.sort(beanList, compareHightLow);

			int size = beanList.size();
			resultBean.setTime(time);
			resultBean.setMaxValue(beanList.get(0).getHlValue());
			resultBean.setMinVale(beanList.get(size - 1).getHlValue());
			resultBean.setCount(size);
			resultBean.setPersent(present(size, total));

			resultBeanList.add(resultBean);
		});

		Collections.sort(resultBeanList, new Comparator<ResultBean>() {

			@Override
			public int compare(ResultBean bean1, ResultBean bean2) {
				double diff = bean1.getCount() - bean2.getCount();
				if (diff > 0) {
					return -1;
				} else if (diff < 0) {
					return 1;
				}
				return 0;
			}
		});

		System.out.println(inputdataList.size());
		System.out.println(filterList.size());

		resultBeanList.forEach(resultBean -> {
			System.out.println(resultBean.getTime() + "," + resultBean.getPersent() + "," + resultBean.getCount() + ","
					+ resultBean.getMaxValue() + "," + resultBean.getMinVale());
		});

	}

	public static String present(double num1, double num2) {
		double ratio = num1 / num2;
		NumberFormat format = NumberFormat.getPercentInstance();
		format.setMaximumFractionDigits(2);
		return format.format(ratio);
	}

	public float getAverageValue(List<TimeDataBean> inputDataList) {

		float sum = 0f;

		Double averageValue = inputDataList.stream().map(new Function<TimeDataBean, Float>() {
			@Override
			public Float apply(TimeDataBean t) {
				return Math.abs(t.getHlValue());
			}
		}).collect(Collectors.averagingDouble(x -> x));

		return averageValue.floatValue();
	}

	public class HighLowComparator implements Comparator<TimeDataBean> {

		@Override
		public int compare(TimeDataBean bean1, TimeDataBean bean2) {
			double diff = Math.abs(bean1.getHlValue()) - Math.abs(bean2.getHlValue());
			if (diff > 0) {
				return -1;
			} else if (diff < 0) {
				return 1;
			}
			return 0;
		}
	}

	public class StartEndComparator implements Comparator<TimeDataBean> {

		@Override
		public int compare(TimeDataBean bean1, TimeDataBean bean2) {
			double diff = Math.abs(bean1.getSeValue()) - Math.abs(bean2.getSeValue());
			if (diff > 0) {
				return -1;
			} else if (diff < 0) {
				return 1;
			}
			return 0;
		}
	}

}
